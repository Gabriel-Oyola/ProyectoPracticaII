@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using ProyectoPracticaII.Client.Models;
@inject HttpClient http
@inject IHttpService Ihttp
@inject NavigationManager NavigatorManager
@inject AuthenticationStateProvider autenticacionProvider;
@attribute [Authorize(Roles = "UsuarioRegistrado")]
@inject NavigationManager NavManager

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        html {
            height: 100%;
        }

        html, body {
            background-color: gray;
            flex-direction: column;
            min-height: 100%;
        }
    </style>
</head>
<body>
    <header>
        <section id="Menu">
            <ul>
                <a href="/Inicio">Inicio</a>
                <a @onclick="ReadPerfil">Mi Perfil</a>
                <a @onclick="Read"> Mis Motos</a>
                <a @onclick="ReadTaller">Mi Taller</a>

            </ul>

        </section>
    </header>
    <section class="form-moto">
        <EditForm Model="moto">
            <h4>ACTUALIZAR DATOS DE TU MOTO</h4>

            <label>Marca</label>
            <InputText @bind-Value=moto.Marca style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"> </InputText>
            <label>Modelo</label>
            <InputText @bind-Value=moto.Modelo style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"> </InputText>
            <label>Año</label>
            <select class="controls" @bind="moto.Año" style="width: 100%; background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;">
                @for (int i = 1950; i <= 2024; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
            <label>Patente</label>
            <InputText @bind-Value=moto.Patente style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;">Patente</InputText>
            <label>Aseguradora</label>
            <InputText @bind-Value=moto.Aseguradora style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;">Aseguradora</InputText>

            <button class="btnC" @onclick="(()=>ActualizarMoto(moto))">Actualizar</button>
            <button class="btnC" @onclick="onCancel"> Cancelar</button>
        </EditForm>
    </section>

    <br/>
    <br/>

    
</body>
<Footer>
    <p> Motored &copy;. Todos los derechos reservados</p>
    </Footer>
</html>

@code {

    [Parameter] public Motocicleta moto { get; set; }
    [Parameter] public EventCallback onValidSubmit { get; set; }
    [Parameter] public EventCallback onCancel { get; set; }
    @inject IJSRuntime JSRuntime

    string IdUsuario;
    string userPreferences;
    string storedUserPreferences;
    private async Task ReadPerfil()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");



        await ObtenerIdUsuario();

        NavManager.NavigateTo($"/MiPerfil/{IdUsuario}");



    }
    private async Task Read()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");



        await ObtenerIdUsuario();

        NavManager.NavigateTo($"/PMotocicletas/ListaMotocicletas/{IdUsuario}");



    }

    private async Task ReadTaller()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");



        await ObtenerIdUsuario();

        NavManager.NavigateTo($"/PTaller/ListaTaller/{IdUsuario}");



    }
    async Task ObtenerIdUsuario()
    {
        try
        {

            var apiUrl = $"api/RastrearId?correo={storedUserPreferences}";

            var response = await http.GetAsync(apiUrl);
            if (response.IsSuccessStatusCode)
            {
                IdUsuario = await response.Content.ReadAsStringAsync();
            }
            else
            {
                IdUsuario = "Error al obtener el ID del usuario";
            }
        }
        catch (Exception ex)
        {
            IdUsuario = $"Error: {ex.Message}";
        }
    }

    public async Task ActualizarMoto(Motocicleta motocicleta)
    {
        var result = await Ihttp.Put($"api/Motocicleta/{motocicleta.IdMoto}", moto);
        NavigatorManager.NavigateTo($"/PMotocicletas/ListaMotocicletas/{moto.IdUsuario}");
    }
}
