@page "/Validacion"

@using ProyectoPracticaII.Client.Models;
@inject HttpClient http
@inject IHttpService Ihttp
@inject NavigationManager NavManager
@using ProyectoPracticaII.Client.extensiones;
@using ProyectoPracticaII.Shared;
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider autenticacionProvider;


@inject IJSRuntime JSRuntime

  <Section class="Form-Registro">
        <h4> Login</h4>
        <EditForm Model="login">
          

            <label>Correo</label>
            <InputText @bind-Value=login.Correo style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputText>
            <label>Clave</label>
            <InputText @bind-Value=login.Clave type="password" style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputText>



            <button class="btnC" @onclick="()=>{ValidarUsuario();}">Entrar</button>




        </EditForm>
    </Section>

@code {
    string IdUsuario;
    string userPreferences;
    string storedUserPreferences;
    @inject IJSRuntime JSRuntime


    private LoginDTO login = new LoginDTO();

    private async Task ValidarUsuario()
    {
        var loginResponse = await http.PostAsJsonAsync<LoginDTO>("/api/MostrarPerfil/Login", login);
        if (loginResponse.IsSuccessStatusCode)
        {
            var sesionUsuario = await loginResponse.Content.ReadFromJsonAsync<SesionDTO>();
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(sesionUsuario);

            ReadPerfil();
        }
    }

    private async Task ReadPerfil()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");



        await ObtenerIdUsuario();

        NavManager.NavigateTo($"/EditarPerfil/{IdUsuario}");



    }
    async Task ObtenerIdUsuario()
    {
        try
        {

            var apiUrl = $"api/RastrearId?correo={storedUserPreferences}";

            var response = await http.GetAsync(apiUrl);
            if (response.IsSuccessStatusCode)
            {
                IdUsuario = await response.Content.ReadAsStringAsync();
            }
            else
            {
                IdUsuario = "Error al obtener el ID del usuario";
            }
        }
        catch (Exception ex)
        {
            IdUsuario = $"Error: {ex.Message}";
        }
    }



}
