@page "/PMotocicletas/CrearMoto/{login:int}"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using ProyectoPracticaII.Client.Models;
@inject HttpClient http
@inject IHttpService Ihttp
@inject NavigationManager NavigatorManager 
@inject AuthenticationStateProvider autenticacionProvider;
@attribute [Authorize(Roles = "UsuarioRegistrado")]
@inject NavigationManager NavManager


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        html{
            height: 100%;
        }
        html, body{

            background-color: gray;
            flex-direction:column; 
            min-height:100%; 
        }
    </style>
</head>
<body>
    <header>
        <section id="Menu">
            <ul>
                <a href="/Inicio">Inicio</a>
                <a href="/MiPerfil/@login">Mi Perfil</a>
                <a @onclick="Read"> Mis Motos</a>
                <a @onclick="ReadTaller">Mi Taller</a>
           
            </ul>

        </section>
    </header>

    <br />
    <section class="form-moto">
    <EditForm Model="NuevaMotocicleta">
        
            <h4> CARGAR DATOS DE TU MOTO</h4>
            <label>IdUsuario</label>

            <InputNumber @bind-Value=NuevaMotocicleta.IdUsuario readonly style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"> Marca</InputNumber>
            <label>Marca</label>
            <InputText class="controls" @bind-Value=NuevaMotocicleta.Marca style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;">Marca</InputText>
            <label>Modelo</label>
            <InputText class="controls" @bind-Value=NuevaMotocicleta.Modelo style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003;; font-size:18px; color: white;">Modelo</InputText>
            <label>Año</label>
            <select class="controls" @bind="NuevaMotocicleta.Año" style="width: 100%; background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;">
                @for (int i = 1950; i <= 2024; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
            <label>Patente</label>
            <InputText class="controls" @bind-Value=NuevaMotocicleta.Patente style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003;; font-size:18px; color: white;">Patente</InputText>
            <label>Aseguradora</label>
            <InputText class="controls" @bind-Value=NuevaMotocicleta.Aseguradora style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003;; font-size:18px; color: white;">Aseguradora</InputText>


            <button class="btnC" @onclick="(()=>CrearMotoU(NuevaMotocicleta))">Registrar motocicleta</button>
   


    </EditForm>
    </section>
    <br/>
    <br/>
    </body>
        
    <Footer>
    <p> Motored &copy;. Todos los derechos reservados</p>
    </Footer>

</html>


@code {
    Motocicleta NuevaMotocicleta = new Motocicleta();
    [Parameter] public int login { get; set; }

     @inject IJSRuntime JSRuntime
       string userPreferences;
    string storedUserPreferences;
    string IdUsuario;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        NuevaMotocicleta.IdUsuario = login;






    }

    private async Task Read()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");



        await ObtenerIdUsuario();

        NavManager.NavigateTo($"/PMotocicletas/ListaMotocicletas/{IdUsuario}");

       

    }
    private async Task ReadTaller()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");



        await ObtenerIdUsuario();

        NavManager.NavigateTo($"/PTaller/ListaTaller/{IdUsuario}");



    }
    async Task ObtenerIdUsuario()
    {
        try
        {

            var apiUrl = $"api/RastrearId?correo={storedUserPreferences}";

            var response = await http.GetAsync(apiUrl);
            if (response.IsSuccessStatusCode)
            {
                IdUsuario = await response.Content.ReadAsStringAsync();
            }
            else
            {
                IdUsuario = "Error al obtener el ID del usuario";
            }
        }
        catch (Exception ex)
        {
            IdUsuario = $"Error: {ex.Message}";
        }
    }


   
    public async Task CrearMotoU(Motocicleta motocicleta)
    {
        var resultado = await Ihttp.Post<Motocicleta>("api/Motocicleta", NuevaMotocicleta);
        if (resultado.Error)
        {
            var body = resultado.HttpResponseMessage;

        }
        NavigatorManager.NavigateTo($"/PMotocicletas/ListaMotocicletas/{login}");
    }

  

}
