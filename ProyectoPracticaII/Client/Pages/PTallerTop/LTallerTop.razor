@page "/PTallerTop/LTallerTop"

@using ProyectoPracticaII.Client.Models;
@inject HttpClient http
@inject IHttpService Ihttp
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@attribute [Authorize(Roles = "UsuarioRegistrado")]



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <header>
        <section id="Menu">
            <ul>
                <a href="/Inicio">Inicio</a>
                <a @onclick="ReadPerfil">Mi Perfil</a>
                <a @onclick="Read">Mis Motos</a>
                <a @onclick="ReadTaller">Mi taller</a>
            </ul>

        </section>
    </header>

    <br />




    <br />
    
    @if (tallerTops != null && tallerTops.Any())
    {
        <table class="table">
            <thead>
                <tr>
              
                    <th>Nombre Taller</th>
                    <th>Rating</th>
                    <th>-</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tallerTop in tallerTops)
                {
                    <tr>
                       
                        <td>@tallerTop.NombreTaller</td>
                        <td>@tallerTop.PromedioRating</td>
                        <td>
                            <StarRating Rating="@Convert.ToInt32(tallerTop.PromedioRating)" />
                        </td>
                    </tr>
             
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No hay datos disponibles.</p>
    }


   

    
    <Footer>
    <p> Motored &copy;. Todos los derechos reservados</p>
    </Footer>
</body>




</html>




@code {
    List<TallerTop> tallerTops;

    protected override async Task OnInitializedAsync()
    {
        // Llama al controlador para obtener los datos
        tallerTops = await http.GetFromJsonAsync<List<TallerTop>>("api/ListaTop");
    }
 
    string IdUsuario;
    string userPreferences;
    string storedUserPreferences;
    @inject IJSRuntime JSRuntime

    private async Task ReadPerfil()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");



        await ObtenerIdUsuario();

        NavManager.NavigateTo($"/MiPerfil/{IdUsuario}");



    }
    private async Task Read()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");



        await ObtenerIdUsuario();

        NavManager.NavigateTo($"/PMotocicletas/ListaMotocicletas/{IdUsuario}");



    }
    private async Task ReadTaller()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");



        await ObtenerIdUsuario();

        NavManager.NavigateTo($"/PTaller/ListaTaller/{IdUsuario}");



    }
    async Task ObtenerIdUsuario()
    {
        try
        {

            var apiUrl = $"api/RastrearId?correo={storedUserPreferences}";

            var response = await http.GetAsync(apiUrl);
            if (response.IsSuccessStatusCode)
            {
                IdUsuario = await response.Content.ReadAsStringAsync();
            }
            else
            {
                IdUsuario = "Error al obtener el ID del usuario";
            }
        }
        catch (Exception ex)
        {
            IdUsuario = $"Error: {ex.Message}";
        }
    }
}