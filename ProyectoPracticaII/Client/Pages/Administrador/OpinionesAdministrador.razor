@page "/ReportesOpiniones/{login:int}"
@using ProyectoPracticaII.Client.Models;
@inject IHttpService Ihttp
@inject NavigationManager NavigatorManager
@inject HttpClient http

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <header>
        <section id="Menu">
            <ul>
                <a href="/Inicio">Inicio</a>
                <a href="#">Mi Perfil</a>
                <a href="PMotocicletas/ListaMotocicletas/">Mis Motos</a>
                <a href="#">Salir</a>
            </ul>

        </section>
    </header>

    <br />




    <br />

    <h3>Reportes del taller</h3>

    <br />
   
   
    <div id="main-container">
        
        <table>
            <thead>
                <tr>

                    <th>Comentario</th>
                    <th>Motivo</th>
                    <th>Fecha</th>
                    <th>Rating</th>
                    <th>Id opinion</th>
                    <th>Id taller</th>
                  
        
                    <th></th>
                    <th></th>
                </tr>
            </thead>
          



@if (ReportarOpinion == null)
{
    <tr>Cargando...</tr>
}
else if (ReportarOpinion.Count == 0)
{
    <tr>No existen Reportes de opiniones</tr>
}
else
{
@foreach (var item in ReportarOpinion)
{
    <tr>
    <td>@item.Comentario</td>
    <td>@item.Motivo</td>
    <td>@item.Fecha</td>
    <td>@item.Rating</td>
    <td>@item.IdOpinion</td>
    <td>@item.IdTaller</td>

    <td>
            <a class="btn btn-warning" @onclick="()=>{EliminarReporte(item.IdReporte);RefreshPage();}">Eliminar Reporte</a>
    </td>

    </tr>

       
}
}

 </table>
    </div>


    

    <Footer>
    <p> Motored &copy;. Todos los derechos reservados</p>
    </Footer>
</body>




</html>







@code {
    [Parameter] public int taller { get; set; }
    [Parameter] public int login { get; set; }
    List<ReportesOpinione> ReportarOpinion;
    [Inject] NavigationManager NavigationManager { get; set; }




    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        await Leer();
    }


    private async Task Leer()
    {

        var respuesta = await Ihttp.Get<List<ReportesOpinione>>($"api/ListaReporteOpinion/{login}");
        if (!respuesta.Error)
        {
            ReportarOpinion = respuesta.Respuesta;
        }
    }


    private void RefreshPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    public async Task EliminarReporte(int id)
    {
        var resultado = await http.DeleteAsync($"api/OpinionAdministrador/EliminarOpinion/{id}");

        // await Leer(id);
    }

}
