@page "/Validacion"

@using ProyectoPracticaII.Client.Models;
@inject HttpClient http
@inject IHttpService Ihttp
@inject NavigationManager NavManager
@using ProyectoPracticaII.Client.extensiones;
@using ProyectoPracticaII.Shared;
@using Microsoft.AspNetCore.Components.Authorization;
@inject AuthenticationStateProvider autenticacionProvider;


@inject IJSRuntime JSRuntime
<head>
    <style>
        * {
            padding: 0;
            margin: 0;
        }



        html, body {
            margin: 0;
            padding: 0;
            background-color: #404040;
        }

        body {
            width: 100%;
            height: 100%;
            font-family: sans-serif;
            letter-spacing: 0.03em;
            line-height: 1.6;
            font-family: 'Open Sans', sans-serif;
        }
    </style>
</head>
  <Section class="Form-Registro">
        <h4> Validacion</h4>
        <EditForm Model="login">
          

            <label>Correo</label>
            <InputText @bind-Value=login.Correo style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputText>
            <label>Clave</label>
            <InputText @bind-Value=login.Clave type="password" style=" width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputText>

        @if (MostrarMensaje)
        {
            @mensaje
        }

            <button class="btnC" @onclick="()=>{ValidarUsuario();}">Entrar</button>




        </EditForm>
    </Section>

@code {
    string IdUsuario;
    string userPreferences;
    string storedUserPreferences;
    @inject IJSRuntime JSRuntime
    string mensaje;
    bool MostrarMensaje;

    private LoginDTO login = new LoginDTO();

    private async Task ValidarUsuario()
    {
        bool aprobado;
        await ReadPerfil(); 

        if(storedUserPreferences == login.Correo)
        {
            var loginResponse = await http.PostAsJsonAsync<LoginDTO>("/api/MostrarPerfil/Login", login);

            if (loginResponse.IsSuccessStatusCode)
            {
              
            
                var sesionUsuario = await loginResponse.Content.ReadFromJsonAsync<SesionDTO>();
                var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
                await autenticacionExt.ActualizarEstadoAutenticacion(sesionUsuario);

                await ObtenerIdUsuario();

                NavManager.NavigateTo($"/EditarPerfil/{IdUsuario}");
            }
            mensaje = "El correo o la contraseña es incorrecta";
            MostrarMensaje = true;

        }
        else
        {
            mensaje = "El correo o la contraseña es incorrecta";
            MostrarMensaje = true;
        }

       
    }

    private async Task ReadPerfil()
    {

        storedUserPreferences = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "correo");

    }
    async Task ObtenerIdUsuario()
    {
        try
        {

            var apiUrl = $"api/RastrearId?correo={storedUserPreferences}";

            var response = await http.GetAsync(apiUrl);
            if (response.IsSuccessStatusCode)
            {
                IdUsuario = await response.Content.ReadAsStringAsync();
            }
            else
            {
                IdUsuario = "Error al obtener el ID del usuario";
            }
        }
        catch (Exception ex)
        {
            IdUsuario = $"Error: {ex.Message}";
        }
    }



}
