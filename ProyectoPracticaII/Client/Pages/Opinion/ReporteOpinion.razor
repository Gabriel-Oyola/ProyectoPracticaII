@page "/Opinion/ReporteOpinion/{opinion:int}"
@using ProyectoPracticaII.Client.Models;
@inject IHttpService Ihttp
@inject HttpClient http
@inject NavigationManager NavigatorManager




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        html{
            height: 100%;
        }
        html, body{

            background-color: gray;
            flex-direction:column; 
            min-height:100%; 
        }
    </style>
</head>
<body>
    <header>
        <section id="Menu">
            <ul>
                <a href="/Inicio">Inicio</a>
                <a href="#">Mi Perfil</a>
                <a href="PMotocicletas/ListaMotocicletas/"> Mis Motos</a>
                <a href="#">Mi Taller</a>
           
            </ul>

        </section>
    </header>


 <section class="form-opinionReporte">

<EditForm Model="NuevoReporteOpinion">

    <h4>Reportar una opinion</h4>

    <label>idUsuarioRC</label>

    <InputNumber @bind-Value=NuevoReporteOpinion.IdUsuarioRc  readonly style="width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputNumber>

    <label>idTaller</label>

    <InputNumber @bind-Value=NuevoReporteOpinion.IdTaller  readonly style="width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputNumber>

    <label>idOpinion</label>

    <InputNumber @bind-Value=NuevoReporteOpinion.IdOpinion readonly style="width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputNumber>


  

    <label>Comentario</label>

    <InputText @bind-Value=NuevoReporteOpinion.Comentario readonly style="width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputText>

    <label>Fecha</label>

    <InputText @bind-Value=NuevoReporteOpinion.Fecha readonly style="width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputText>

    <label>Rating</label>

    <InputNumber @bind-Value=NuevoReporteOpinion.Rating readonly style="width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputNumber>

    <label>Motivo</label>

    <InputText @bind-Value=NuevoReporteOpinion.Motivo  style="width: 100%;
    background: #000; padding:10px; border-radius:4px; margin-bottom: 16px; border: 1px solid #bd0003; font-size:18px; color: white;"></InputText>

            <button class="btnC" @onclick="(()=>CrearReporteOpinion(NuevoReporteOpinion))">Nueva Opinion</button>

</EditForm>

</section>

 <br/>
    <br/>
    </body>
        
    <Footer>
    <p> Motored &copy;. Todos los derechos reservados</p>
    </Footer>

</html>

@code {
    ReportesOpinione NuevoReporteOpinion = new ReportesOpinione();
    [Parameter] public int login { get; set; }
    [Parameter] public int opinion { get; set; }
    [Parameter] public int taller { get; set; }
    Opinione opinionEncontrada = new Opinione();
    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        await BuscarOpinion();
        NuevoReporteOpinion.IdUsuarioRc = opinionEncontrada.IdUsuario;
        NuevoReporteOpinion.IdTaller = opinionEncontrada.IdTaller;
        NuevoReporteOpinion.IdOpinion = opinionEncontrada.IdOpinion;
        NuevoReporteOpinion.Comentario = opinionEncontrada.Comentario;
        NuevoReporteOpinion.Fecha = opinionEncontrada.Fecha;
        NuevoReporteOpinion.Rating = opinionEncontrada.Rating;
    }
    private async Task BuscarOpinion()
    {

        try
        {
            var response = await http.GetFromJsonAsync<Opinione>($"api/opinion/GetOpinionesPorIdOpinion/{opinion}");


            if (response != null)
            {
                opinionEncontrada = response;

            }
        }
        catch
        {
            
        }

    }



    public async Task CrearReporteOpinion(ReportesOpinione ReportesOpinione)
    {
        var resultado = await Ihttp.Post<ReportesOpinione>("api/ReporteOP", NuevoReporteOpinion);
        if (resultado.Error)
        {
            var body = resultado.HttpResponseMessage;

        }
        // NavigatorManager.NavigateTo($"/PTaller/ListaTaller/{nuevaOpinion.IdUsuario}");
    }


}